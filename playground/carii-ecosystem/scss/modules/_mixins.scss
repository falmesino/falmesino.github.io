@mixin transition( $duration, $effect )
{
    // ease | linear | ease-in | ease-out | ease-in-out
    -webkit-transition: $duration $effect;
    -moz-transition:    $duration $effect;
    -ms-transition:    $duration $effect;
    -o-transition:      $duration $effect;
    transition:         $duration $effect;
}

@mixin translateY( $y )
{
    -webkit-transform: translateY( $y );
    -moz-transform: translateY( $y );
    -ms-transform: translateY( $y );
    -o-transform: translateY( $y );
    transform: translateY( $y );
}

@mixin translateX( $x )
{
    -webkit-transform: translateX( $x );
    -moz-transform: translateX( $x );
    -ms-transform: translateX( $x );
    -o-transform: translateX( $x );
    transform: translateX( $x );
}

@mixin translate3d( $x, $y, $z )
{
    -webkit-transform: translate3d( $x, $y, $z );
    -moz-transform: translate3d( $x, $y, $z );
    -ms-transform: translate3d( $x, $y, $z );
    -o-transform: translate3d( $x, $y, $z );
    transform: translate3d( $x, $y, $z );
}

@mixin rotate( $d )
{
    -webkit-transform: rotate( $d );
    -moz-transform: rotate( $d );
    -ms-transform: rotate( $d );
    -o-transform: rotate( $d );
    transform: rotate( $d );
}

@mixin fixedSize( $size )
{
    height: $size;
    min-height: $size;
    max-height: $size;
    width: $size;
    min-width: $size;
    max-width: $size;
    line-height: $size;
}

@function calculateRem( $size )
{
    $remSize: $size / 16px;
    @return $remSize * 1rem;
}

@mixin font-size( $size )
{
    font-size: $size;
    font-size: calculateRem( $size );
}

@mixin line-height( $heightValue: 12 )
{
    line-height: $heightValue + px; //fallback for old browsers
    line-height:  (0.125 * $heightValue ) + rem;
}

@mixin opacity( $opacity )
{
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin placeholderColor( $color )
{
    &::-webkit-input-placeholder { color: $color; }
    &::-moz-placeholder { color: $color; } /* firefox 19+ */
    &:-ms-input-placeholder { color: $color; } /* ie */
    &:-moz-placeholder { color: $color; }
}

@mixin gradientVertical( $color_start, $color_end )
{
    background: -moz-linear-gradient(top, $color_start 0%, $color_end 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(0,0,0,0)), color-stop(100%,$color_end)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, $color_start) 0%,$color_end 100%; /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, $color_start 0%,$color_end 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top, $color_start 0%,$color_end 100%); /* IE10+ */
    background: linear-gradient(to bottom, $color_start 0%,$color_end 100%); /* W3C */
    // filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#a6000000',GradientType=0 ); /* IE6-8 */
}

@mixin gradientHorizontal($color_start, $color_end)
{
    background: $color_start; /* Old browsers */
    background: -moz-linear-gradient(left,  $color_start 0%, $color_end 100%); /* FF3.6-15 */
    background: -webkit-linear-gradient(left,  $color_start 0%, $color_end 100%); /* Chrome10-25,Safari5.1-6 */
    background: linear-gradient(to right,  $color_start 0%, $color_end 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$color_start', endColorstr='$color_end',GradientType=1 ); /* IE6-9 */
}

@mixin selectionColor($color, $text_color: white)
{
     &::-moz-selection
    {
        background: $color;
        color: $text_color;
    }

    &::selection
    {
        background: $color;
        color: $text_color;
    }
}

@mixin placeholderColor($color)
{
    &::-webkit-input-placeholder 
    { 
        /* Chrome/Opera/Safari */
        color: $color;
    }
    &::-moz-placeholder 
    { 
        /* Firefox 19+ */
        color: $color;
    }
    &:-ms-input-placeholder { 
        /* IE 10+ */
        color: $color;
    }
    &:-moz-placeholder 
    { 
        /* Firefox 18- */
        color: $color;
    }
}

/* https://css-tricks.com/snippets/sass/maintain-aspect-ratio-mixin/ */
@mixin aspect-ratio($width, $height) 
{
    position: relative;
    
    &:before
    {
        display: block;
        content: "";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }
    
    > .content 
    {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}